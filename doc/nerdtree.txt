*NERDTree.txt*   A tree explorer plugin to rule the Vim world. Bwahahaha!!

                                    # #### ####                                ~
                                  ### \/#|### |/####                           ~
   d8   888                      ##\/#/ \||/##/_/##/_#                         ~
  d88   888 ee   ,e e,         ###  \/###|/ \/ # ###                           ~
 d88888 888 88b d88 88b      ##_\_#\_\## | #/###_/_####                        ~
  888   888 888 888   ,     ## #### # \ #| /  #### ##/##                       ~
  888   888 888  "YeeP"     __#_--###`. |{,###---###-~                         ~
                                     \ % @%                                    ~
  Y88b Y88 888'Y88 888 88e  888 88e   \%@%  88P'888'Y88                        ~
   Y88b Y8 888 ,'Y 888 888D 888 888b   %o%  P'  888  'Y 888,8,  ,e e,   ,e e,  ~
  b Y88b Y 888C8   888 88"  888 8888D  %@%      888     888 "  d88 88b d88 88b ~
  8b Y88b  888 ",d 888 b,   888 888P   %@%      888     888    888   , 888   , ~
  88b Y88b 888,d88 888 88b, 888 88"    %@%      888     888     "YeeP"  "YeeP" ~
                                 , -=-%{@%-^- _                                ~
                                   ejm `}               Reference Manual       ~
                                        {                                      ~
==============================================================================
CONTENTS                                                     *NERDTree-contents*

    1.Intro...................................|NERDTree|
    2.Functionality provided..................|NERDTreeFunctionality|
        2.1.Global Commands...................|NERDTreeGlobalCommands|
        2.2.NERDTree Mappings.................|NERDTreeMappings|
    3.Settings................................|NERDTreeSettings|
        3.1.Settings summary..................|NERDTreeSettingsSummary|
        3.2.Settings details..................|NERDTreeSettingsDetails|
    4.The NERDTree API........................|NERDTreeAPI|
        4.1.Key Map API.......................|NERDTreeAPIKeymap|
        4.2 Path Filter API...................|NERDTreeAPIaddPathFilter|
        4.3.Event Listener API................|NERDTreeAPIEventListener|
        4.4 Render                            |NERDTreeAPIRender|
    5.About...................................|NERDTreeAbout|
    6.License.................................|NERDTreeLicense|

==============================================================================
1. Intro                                                              *NERDTree*

What is this "NERDTree"??

The NERDTree allows you to explore your filesystem and to open files and
directories. It presents the filesystem to you in the form of a tree which you
manipulate with the keyboard and/or mouse. It also allows you to perform
simple filesystem operations.

The following features and functionality are provided by the NERDTree:
    * Files and directories are displayed in a hierarchical tree structure
    * Different highlighting is provided for the following types of nodes:
        * files
        * directories
        * sym-links
        * windows .lnk files
        * read-only files
        * executable files
    * Many (customisable) mappings are provided to manipulate the tree:
        * Mappings to open/close/explore directory nodes
        * Mappings to open files in new/existing windows/tabs
        * Mappings to change the current root of the tree
        * Mappings to navigate around the tree
        * ...
    * Most NERDTree navigation can also be done with the mouse
    * Filtering of tree content (can be toggled at runtime)
        * custom file filters to prevent e.g. vim backup files being displayed
        * optional displaying of hidden files (. files)
        * files can be "turned off" so that only directories are displayed
    * The position and size of the NERDTree window can be customised
    * The order in which the nodes in the tree are listed can be customised.
    * A model of your filesystem is created/maintained as you explore it. This
      has several advantages:
        * All filesystem information is cached and is only re-read on demand
        * If you revisit a part of the tree that you left earlier in your
          session, the directory nodes will be opened/closed as you left them
    * The script remembers the cursor position and window position in the NERD
      tree so you can toggle it off (or just close the tree window) and then
      reopen it (with NERDTreeToggle) the NERDTree window will appear exactly
      as you left it
    * You can have a separate NERDTree for each tab, share trees across tabs,
      or a mix of both.
    * By default the script overrides the default file browser (netrw), so if
      you :edit a directory a (slightly modified) NERDTree will appear in the
      current window
    * A programmable menu system is provided (simulates right clicking on a
      node)
        * one default menu plugin is provided to perform basic filesystem
          operations (create/delete/move/copy files/directories)
    * There's an API for adding your own keymappings


==============================================================================
2. Functionality provided                                *NERDTreeFunctionality*

------------------------------------------------------------------------------
2.1. Global Commands                                    *NERDTreeGlobalCommands*

:NERDTree [<start-directory>]                                        *:NERDTree*
    Opens a fresh NERDTree. The root of the tree depends on the argument
    given. There are 3 cases: If no argument is given, the current directory
    will be used.  If a directory is given, that will be used. If a bookmark
    name is given, the corresponding directory will be used.  For example: >
        :NERDTree /home/marty/vim7/src
<
:NERDTreeToggle [<start-directory>]               *:NERDTreeToggle*
    If a NERDTree already exists for this tab, it is reopened and rendered
    again.  If no NERDTree exists for this tab then this command acts the
    same as the |:NERDTree| command.

:NERDTreeFocus                                                  *:NERDTreeFocus*
    Opens (or reopens) the NERDTree if it is not currently visible;
    otherwise, the cursor is moved to the already-open NERDTree.

:NERDTreeMirror                                                *:NERDTreeMirror*
    Shares an existing NERDTree, from another tab, in the current tab.
    Changes made to one tree are reflected in both as they are actually the
    same buffer.

    If only one other NERDTree exists, that tree is automatically mirrored.
    If more than one exists, the script will ask which tree to mirror.

:NERDTreeClose                                                  *:NERDTreeClose*
    Close the NERDTree in this tab.

:NERDTreeFind [<path>]                                           *:NERDTreeFind*
    Without the optional argument, find and reveal the file for the active
    buffer in the NERDTree window.  With the <path> argument, find and
    reveal the specified path.

    Focus will be shifted to the NERDTree window, and the cursor will be
    placed on the tree node for the determined path.  If a NERDTree for the
    current tab does not exist, a new one will be initialized.

:NERDTreeCWD                                                      *:NERDTreeCWD*
    Change the NERDTree root to the current working directory.  If no
    NERDTree exists for this tab, a new one is opened.

:NERDTreeRefreshRoot                                      *:NERDTreeRefreshRoot*
    Refreshes the NERDTree root node.

------------------------------------------------------------------------------
2.2. NERDTree Mappings                                        *NERDTreeMappings*

Default~
Key      Description                                                  help-tag~

o........Open files, directories and bookmarks......................|NERDTree-o|
go.......Open selected file, but leave cursor in the NERDTree......|NERDTree-go|
T........Same as 't' but keep the focus on the current tab..........|NERDTree-T|
i........Open selected file in a split window.......................|NERDTree-i|
gi.......Same as i, but leave the cursor on the NERDTree...........|NERDTree-gi|
s........Open selected file in a new vsplit.........................|NERDTree-s|
gs.......Same as s, but leave the cursor on the NERDTree...........|NERDTree-gs|
O........Recursively open the selected directory....................|NERDTree-O|
x........Close the current nodes parent.............................|NERDTree-x|
X........Recursively close all children of the current node.........|NERDTree-X|

<CR>............same as |NERDTree-o|.
double-click....same as |NERDTree-o|.

p........Jump to current nodes parent...............................|NERDTree-p|
K........Jump up inside directories at the current tree depth.......|NERDTree-K|
J........Jump down inside directories at the current tree depth.....|NERDTree-J|
<C-J>....Jump down to next sibling of the current directory.......|NERDTree-C-J|
<C-K>....Jump up to previous sibling of the current directory.....|NERDTree-C-K|

R........Recursively refresh the current root.......................|NERDTree-R|

I........Toggle whether hidden files displayed......................|NERDTree-I|
f........Toggle whether the file filters are used...................|NERDTree-f|
F........Toggle whether files are displayed.........................|NERDTree-F|

q........Close the NERDTree window..................................|NERDTree-q|
<ESC>....Unfocus NERDTree window..................................|NERDTree-esc|

------------------------------------------------------------------------------
                                                                    *NERDTree-o*
Default key: o
Applies to: files and directories.

If a file node is selected, it is opened in the previous window.

If a directory is selected it is opened or closed depending on its current
state.

------------------------------------------------------------------------------
                                                                   *NERDTree-go*
Default key: go
Applies to: files.

If a file node that links to a file is selected, it is opened in the previous
window, but the cursor does not move.

The default key combo for this mapping is "g" + NERDTreeMapActivateNode (see
|NERDTree-o|).

------------------------------------------------------------------------------
                                                                    *NERDTree-t*
Default key: t
Applies to: files and directories.

Opens the selected file in a new tab. If a directory is selected, a fresh
NERDTree for that directory is opened in a new tab.

If a bookmark which points to a directory is selected, open a NERDTree for
that directory in a new tab. If the bookmark points to a file, open that file
in a new tab.

------------------------------------------------------------------------------
                                                                    *NERDTree-T*
Default key: T
Applies to: files and directories.

The same as |NERDTree-t| except that the focus is kept in the current tab.

------------------------------------------------------------------------------
                                                                    *NERDTree-i*
Default key: i
Applies to: files.

Opens the selected file in a new split window and puts the cursor in the new
window.

------------------------------------------------------------------------------
                                                                   *NERDTree-gi*
Default key: gi
Applies to: files.

The same as |NERDTree-i| except that the cursor is not moved.

The default key combo for this mapping is "g" + NERDTreeMapOpenSplit (see
|NERDTree-i|).

------------------------------------------------------------------------------
                                                                    *NERDTree-s*
Default key: s
Applies to: files.

Opens the selected file in a new vertically split window and puts the cursor
in the new window.

------------------------------------------------------------------------------
                                                                   *NERDTree-gs*
Default key: gs
Applies to: files.

The same as |NERDTree-s| except that the cursor is not moved.

The default key combo for this mapping is "g" + NERDTreeMapOpenVSplit (see
|NERDTree-s|).

------------------------------------------------------------------------------
                                                                    *NERDTree-O*
Default key: O
Applies to: directories.

Recursively opens the selected directory.

All files and directories are cached, but if a directory would not be
displayed due to file filters (see |NERDTreeIgnore| |NERDTree-f|) or the
hidden file filter (see |NERDTreeShowHidden|) then its contents are not
cached. This is handy, especially if you have .svn directories.

------------------------------------------------------------------------------
                                                                    *NERDTree-x*
Default key: x
Applies to: files and directories.

Closes the parent of the selected node.

------------------------------------------------------------------------------
                                                                    *NERDTree-X*
Default key: X
Applies to: directories.

Recursively closes all children of the selected directory.

Tip: To quickly "reset" the tree, use |NERDTree-P| with this mapping.

------------------------------------------------------------------------------
                                                                    *NERDTree-p*
Default key: p
Applies to: files and directories.

Jump to the parent node of the selected node.

------------------------------------------------------------------------------
                                                                    *NERDTree-K*
Default key: K
Applies to: files and directories.

Jump to the first child of the current nodes parent.

If the cursor is already on the first node then do the following:
    * loop back thru the siblings of the current nodes parent until we find an
      open dir with children
    * go to the first child of that node

------------------------------------------------------------------------------
                                                                    *NERDTree-J*
Default key: J
Applies to: files and directories.

Jump to the last child of the current nodes parent.

If the cursor is already on the last node then do the following:
    * loop forward thru the siblings of the current nodes parent until we find
      an open dir with children
    * go to the last child of that node

------------------------------------------------------------------------------
                                                                  *NERDTree-C-J*
Default key: <C-J>
Applies to: files and directories.

Jump to the next sibling of the selected node.

------------------------------------------------------------------------------
                                                                  *NERDTree-C-K*
Default key: <C-K>
Applies to: files and directories.

Jump to the previous sibling of the selected node.

------------------------------------------------------------------------------
                                                                    *NERDTree-r*
Default key: r
Applies to: no restrictions.

Recursively refresh the tree root.

------------------------------------------------------------------------------
                                                                    *NERDTree-I*
Default key: I
Applies to: no restrictions.

Toggles whether hidden files (i.e. "dot files") are displayed.

------------------------------------------------------------------------------
                                                                    *NERDTree-f*
Default key: f
Applies to: no restrictions.

Toggles whether file filters are used. See |NERDTreeIgnore| for details.

------------------------------------------------------------------------------
                                                                    *NERDTree-q*
Default key: q
Applies to: no restrictions.

Closes the NERDTree window.

==============================================================================
3. Customisation                                              *NERDTreeSettings*


------------------------------------------------------------------------------
3.1. Customisation summary                             *NERDTreeSettingsSummary*

The plugin provides the following settings that can customise the behaviour
the NERDTree. These settings should be set in your vimrc, using `:let`.

|loaded_nerdtree|             Turns off the script.

|NERDTreeNaturalSort|         Tells the NERDTree whether to use natural sort
                            order or not when sorting nodes.

|NERDTreeSortHiddenFirst|     Tells the NERDTree whether to take the dot at
                            the beginning of the hidden file names into
                            account when sorting nodes.

|NERDTreeIgnore|              Tells the NERDTree which files to ignore.

|NERDTreeRespectWildIgnore|   Tells the NERDTree to respect `'wildignore'`.

|NERDTreeQuitOnOpen|          Closes the tree window or bookmark table after
                            opening a file.

|NERDTreeShowHidden|          Tells the NERDTree whether to display hidden
                            files on startup.

|NERDTreeSortOrder|           Tell the NERDTree how to sort the nodes in the
                            tree.

|NERDTreeStatusline|          Set a statusline for NERDTree windows.

|NERDTreeWinPos|              Tells the script where to put the NERDTree
                            window.

|NERDTreeWinSize|             Sets the window size when the NERDTree is
                            opened.

|NERDTreeDirArrowCollapsible| These characters indicate when a directory is
|NERDTreeDirArrowExpandable|  either collapsible or expandable.
|NERDTreeFile|                This character indicates a file node

------------------------------------------------------------------------------
3.2. Customisation details                             *NERDTreeSettingsDetails*

To enable any of the below settings you should put an appropriate >
    let <setting>=<value>
<line in your ~/.vimrc.

                                                              *loaded_nerdtree*
If this plugin is making you feel homicidal, it may be a good idea to turn it
off with this line in your vimrc: >
    let loaded_nerdtree=1
<
------------------------------------------------------------------------------
                                                     *NERDTreeCaseSensitiveSort*
Values: 0 or 1.
Default: 0.

By default the NERDTree does not sort nodes case sensitively, i.e. nodes
could appear like this: >
    bar.c
    Baz.c
    blarg.c
    boner.c
    Foo.c
<
But, if you set this setting to 1 then the case of the nodes will be taken
into account. The above nodes would then be sorted like this: >
    Baz.c
    Foo.c
    bar.c
    blarg.c
    boner.c
<
------------------------------------------------------------------------------
                                                           *NERDTreeNaturalSort*
Values: 0 or 1.
Default: 0.

By default the NERDTree does not sort nodes in natural sort order, i.e. nodes
could appear like this: >
    z1.txt
    z10.txt
    z100.txt
    z11.txt
    z110.txt
    z2.txt
    z20.txt
    z3.txt
<
But if you set this setting to 1 then the natural sort order will be used. The
above nodes would then be sorted like this: >
    z1.txt
    z2.txt
    z3.txt
    z10.txt
    z11.txt
    z20.txt
    z100.txt
    z110.txt
<
------------------------------------------------------------------------------
                                                   *NERDTreeHighlightCursorline*
Values: 0 or 1.
Default: 1.

If set to 1, the current cursor line in the NERDTree buffer will be
highlighted. This is done using the `'cursorline'` Vim option.

------------------------------------------------------------------------------
                                                                *NERDTreeIgnore*
Values: a list of regular expressions.
Default: ['\~$'].

This setting is used to specify which files the NERDTree should ignore. It
must be a list of regular expressions. When the NERDTree is rendered, any
files/dirs that match any of the regex's in NERDTreeIgnore won't be displayed.

For example if you put the following line in your vimrc: >
    let NERDTreeIgnore=['\.vim$', '\~$']
<
then all files ending in .vim or ~ will be ignored.

There are 2 magic flags that can be appended to the end of each regular
expression to specify that the regex should match only files or only dirs.
These flags are "[[dir]]" and "[[file]]".

Example: >
    let NERDTreeIgnore=['\.d$[[dir]]', '\.o$[[file]]']
<
This will cause all dirs ending in ".d" to be ignored and all files ending in
".o" to be ignored.

Note: to tell the NERDTree not to ignore any files you must use the following
line: >
    let NERDTreeIgnore=[]
<
The file filters can be turned on and off dynamically with the |NERDTree-f|
mapping.

------------------------------------------------------------------------------
                                                     *NERDTreeRespectWildIgnore*
Values: 0 or 1.
Default: 0.

If set to 1, the `'wildignore'` setting is respected.

------------------------------------------------------------------------------
                                                            *NERDTreeQuitOnOpen*

Values: 0,1,2 or 3.
Default: 0

This setting governs whether the NERDTree window or the bookmarks table closes
after opening a file with the |NERDTree-o|, |NERDTree-i|, |NERDTree-t| and
|NERDTree-T| mappings.

 Value  | NERDTree Window Behavior
 -------+-------------------------------------------------------
 0      | No change
 1      | Closes after opening a file

------------------------------------------------------------------------------
                                                            *NERDTreeShowHidden*
Values: 0 or 1.
Default: 0.

This setting tells vim whether to display hidden files by default. This
setting can be dynamically toggled, per tree, with the |NERDTree-I| mapping.
Use one of the follow lines for this setting: >
    let NERDTreeShowHidden=0
    let NERDTreeShowHidden=1
<
------------------------------------------------------------------------------
                                                             *NERDTreeSortOrder*
Values: a list of regular expressions.
Default: ['\/$', '*', '\.swp$',  '\.bak$', '\~$']

This setting is a list of regular expressions which are used to specify the
order of nodes under their parent.

For example, if the setting is: >
    ['\.vim$', '\.c$', '\.h$', '*', 'foobar']
<
then all .vim files will be placed at the top, followed by all .c files then
all .h files. All files containing the string 'foobar' will be placed at the
end.  The star is a special flag: it tells the script that every node that
doesn't match any of the other regexps should be placed here.

If no star is present in NERDTreeSortOrder then one is automatically
appended to the array.

The regex '\/$' should be used to match directory nodes.

A special flag can be used to sort by the modification timestamps of files and
directories. It is either '[[timestamp]]' for ascending, or '[[-timestamp]]'
for descending. If placed at the beginning of the list, files and directories
are sorted by timestamp, and then by the remaining items in the sort order
list. If this flag is in any other position of the list, timestamp sorting is
done secondarily. See examples 4, 5, and 6 below.

After this sorting is done, the files in each group are sorted alphabetically.

Examples: >
    (1) ['*', '\/$']
    (2) []
    (3) ['\/$', '\.rb$', '\.php$', '*', '\.swp$',  '\.bak$', '\~$']
    (4) ['[[timestamp]]']
    (5) ['\/$', '*', '[[-timestamp]]']
    (6) ['\.md$', '\.c$', '[[-timestamp]]', '*']
<
1. Directories will appear last, everything else will appear above.
2. Everything will simply appear in alphabetical order.
3. Dirs will appear first, then ruby and php. Swap files, bak files and vim
   backup files will appear last with everything else preceding them.
4. All files and directories are sorted by timestamp, oldest first. If any
   files have identical timestamps, they are sorted alphabetically.
5. Directories are first, newest to oldest, then everything else, newest to
   oldest.
6. Markdown files first, followed by C source files, then everything else.
   Each group is shown newest to oldest.

------------------------------------------------------------------------------
                                                            *NERDTreeStatusline*
Values: Any valid `'statusline'` setting.
Default: %{exists('b:NERDTree')?b:NERDTree.root.path.str():''}

Defines the value for the `'statusline'` setting in NERDTree windows.

Note: The setting is actually applied using |:let-&|, not |:set|, so
escaping spaces is not necessary.

Setting this to -1 will deactivate it so that your global `'statusline'`
setting is used.

------------------------------------------------------------------------------
                                                                *NERDTreeWinPos*
Values: "left" or "right"
Default: "left".

This setting is used to determine where NERDTree window is placed on the
screen.

This setting makes it possible to use two different explorer plugins
simultaneously. For example, you could have the taglist plugin on the left of
the window and the NERDTree on the right.

------------------------------------------------------------------------------
                                                               *NERDTreeWinSize*
Values: a positive integer.
Default: 31.

This setting is used to change the size of the NERDTree when it is loaded.

------------------------------------------------------------------------------
                      *NERDTreeDirArrowCollapsible* *NERDTreeDirArrowExpandable*
Values: Any single character.
Defaults: ▾ and ▸

These characters indicate whether a directory is collapsible or expandable.

They can be set to "\u00a0" to hide the arrows, but if you do this you may
need to change the node delimiter. See |NERDTreeNodeDelimiter|. You cannot use
the same character for both the arrows and the delimiter.

Example: >
    let NERDTreeDirArrowExpandable=">"
    let NERDTreeDirArrowCollapsible="v"
<
------------------------------------------------------------------------------
                                                                  *NERDTreeFile*
Values: Any single character.
Defaults: ∙

This character indicate a file node.

Example: >
    let NERDTreeFile="∙"
<

==============================================================================
4. The NERDTree API                                                *NERDTreeAPI*

------------------------------------------------------------------------------
4.1. Key Map API                                             *NERDTreeAPIKeymap*

>
    TODO
<

------------------------------------------------------------------------------
4.2 Path Filter API                                   *NERDTreeAPIaddPathFilter*

Path filters are essentially a more powerful version of  |NERDTreeIgnore|.
If the simple regex matching in |NERDTreeIgnore| is not enough then use
|nerdtree#api#addPathFilter()| to add a callback function that paths will be
checked against when the decision to ignore them is made.

Example >

    call nerdtree#api#addPathFilter('MyFilter')

    function! MyFilter(params)
        "params is a dict containing keys: 'nerdtree' and 'path' which are
        "g:NERDTree and g:NERDTreePath objects

        "return 1 to ignore params['path'] or 0 otherwise
    endfunction
<
------------------------------------------------------------------------------
4.3 Event Listener API                                 NERDTreeAPIEventListener*

Use this API if you want to run a callback for events.

Example >

    call nerdtree#api#addListener("init", "MyListener")

    "....

    function! MyListener(event)
        "This function will be called whenever a Path object is created.

        "a:event is an object that contains a bunch of relevant info -
        "including the affected path. See lib/nerdtree/event.vim for details.
    endfunction
<

Current events supported:
  init ~
  refresh ~
  refreshFlags ~

------------------------------------------------------------------------------
4.5 Render                                                   *NERDTreeAPIRender*
    Re-renders the NERDTree buffer. Useful if you change the state of the
    tree and you want to it to be reflected in the UI.

==============================================================================
5. About                                                         *NERDTreeAbout*

The author of the NERDTree is a terrible terrible monster called Martyzilla
who gobbles up small children with milk and sugar for breakfast.

He can be reached at martin.grenfell at gmail dot com. He would love to hear
from you, so feel free to send him suggestions and/or comments about this
plugin.  Don't be shy --- the worst he can do is slaughter you and stuff you
in the fridge for later ;)

Martyzilla recruited two other unwitting accomplices to become his minions in
his quest to conquer the Vim plugin world. While he may still love to receive
your emails, the best way to send suggestions, bug reports, and questions is
to submit an issue at http://github.com/scrooloose/nerdtree/issues.

The latest stable and development versions are on Github.
    Stable: http://github.com/scrooloose/nerdtree (master branch)
    Development: http://github.com/scrooloose/nerdtree/branches

Title Credit:
  * http://ascii.co.uk/art/tree

  * Patrick Gillespie's Text ASCII Art Generator
    http://patorjk.com/software/taag
    http://patorjk.com/software/taag/#p=display&f=Rozzo&t=the%20NERD%20Tree

==============================================================================
6. License                                                     *NERDTreeLicense*

The NERDTree is released under the wtfpl.
See http://sam.zoy.org/wtfpl/COPYING.

------------------------------------------------------------------------------
 vim:tw=78:ts=8:ft=help:noet:nospell
